/*
 * =============================================
 * Movement
 * =============================================
 */

void moveForward_Time(int percent, double distance) {
    motor_RightWheel.SetPercent(percent);
    motor_LeftWheel.SetPercent(percent);
    Sleep(distance * TIME_INCH);
    motor_RightWheel.Stop();
    motor_LeftWheel.Stop();
}

void moveBackward_Time(int percent, double distance) {
    motor_RightWheel.SetPercent(-1 * percent);
    motor_LeftWheel.SetPercent(-1 * percent);
    Sleep(distance * TIME_INCH);
    motor_RightWheel.Stop();
    motor_LeftWheel.Stop();
}

void turnRight_Time(int percent, double distance) {
    motor_RightWheel.SetPercent(-1 * percent);
    motor_LeftWheel.SetPercent(percent);
    Sleep(distance * TIME_ROTATE);
    motor_RightWheel.Stop();
    motor_LeftWheel.Stop();
}

void turnLeft_Time(int percent, double distance) {
    motor_RightWheel.SetPercent(percent);
    motor_LeftWheel.SetPercent(-1 * percent);
    Sleep(distance * TIME_ROTATE);
    motor_RightWheel.Stop();
    motor_LeftWheel.Stop();
}

void moveForward(int percent, double distance) {
    encoder_Right.ResetCounts();
    encoder_Left.ResetCounts();
    motor_RightWheel.SetPercent(percent);
    motor_LeftWheel.SetPercent(percent);
    // For 16 counts
    while ((encoder_Left.Counts() < (distance * COUNTS_PER_INCH_16)) && (encoder_Right.Counts() < (distance * COUNTS_PER_INCH_16))) {
    }
    motor_RightWheel.Stop();
    motor_LeftWheel.Stop();
}

void moveBackward(int percent, double distance) {
    encoder_Right.ResetCounts();
    encoder_Left.ResetCounts();
    motor_RightWheel.SetPercent(-1 * percent);
    motor_LeftWheel.SetPercent(-1 * percent);
    // For 16 counts
    while ((encoder_Left.Counts() < (distance * COUNTS_PER_INCH_16)) && (encoder_Right.Counts() < (distance * COUNTS_PER_INCH_16))) {
    }
    motor_RightWheel.Stop();
    motor_LeftWheel.Stop();
}

void turnRight(int percent, double turns) {
    encoder_Right.ResetCounts();
    encoder_Left.ResetCounts();
    motor_RightWheel.SetPercent(-1 * percent);
    motor_LeftWheel.SetPercent(percent);
    // For 16 counts
    while ((encoder_Left.Counts() < (turns * COUNTS_PER_TURN_16)) && (encoder_Right.Counts() < turns * COUNTS_PER_TURN_16)) {
    }
    motor_RightWheel.Stop();
    motor_LeftWheel.Stop();
}

void turnLeft(int percent, double turns) {
    encoder_Right.ResetCounts();
    encoder_Left.ResetCounts();
    motor_RightWheel.SetPercent(percent);
    motor_LeftWheel.SetPercent(-1 * percent);
    // For 16 counts
    while ((encoder_Left.Counts() < (turns * COUNTS_PER_TURN_16)) && (encoder_Right.Counts() < turns * COUNTS_PER_TURN_16)) {
    }
    motor_RightWheel.Stop();
    motor_LeftWheel.Stop();
}